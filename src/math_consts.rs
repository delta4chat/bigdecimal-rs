extern crate concat_idents;
use self::concat_idents::concat_idents;

macro_rules! traits {
    ($trait_name:ident, $fn_name:ident, $const_name:ident, $value:literal) => {
        pub trait $trait_name {
            fn $fn_name() -> Self;
        }

        pub const $const_name: &'static str = stringify!($value);

        impl $trait_name for &'static str {
            #[inline(always)]
            fn $fn_name() -> Self {
                stringify!($value)
            }
        }

        concat_idents! (const_trait = Const, $trait_name {
            pub trait const_trait: $trait_name {
                const $const_name: Self;
            }
            impl const_trait for &'static str {
                const $const_name: Self = stringify!($value);
            }
        });

        trait_impls!($trait_name, $fn_name, $const_name, $value, f64 f32 usize isize u8 i8 u16 i16 u32 i32 u64 i64 u128 i128);
    }
}

macro_rules! trait_impls {
    ($trait_name:ident, $fn_name:ident, $const_name:ident, $value:literal, $($type_name:ident)*) => {$(
        impl $trait_name for $type_name {
            #[inline(always)]
            fn $fn_name() -> Self {
                const VALUE: f64 = $value;
                VALUE as Self
            }
        }

        concat_idents! (const_trait = Const, $trait_name {
            impl const_trait for $type_name {
                const $const_name: Self = {
                    const VALUE: f64 = $value;
                    VALUE as Self
                };
            }
        });

        concat_idents! (typed_const_name = $const_name, _, $type_name {
            #[allow(non_upper_case_globals)]
            pub const typed_const_name: $type_name = {
                const VALUE: f64 = $value;
                VALUE as $type_name
            };
        });
    )*}
}

traits!(C, c, C, 299792458.0);

traits!(Pi, pi, PI, 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196);
traits!(Frac1Pi, frac1pi, FRAC_1_PI, 0.31830988618379067153776752674502872406891929148091289749533468811779359526845307018022760553250617191214568545351591607378582369222915730575593482146339967845847993387481815514615549279385061537743479);

traits!(E, e, E, 2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101844);
traits!(Frac1E, frac1e, FRAC_1_E, 0.3678794411714423215955237701614608674458111310317678345078368016974614957448998033571472743459196437466273252768439952082469757927901290086266535894940987830921943673773381150486389911251456163449878);

traits!(Sqrt2, sqrt2, SQRT_2, 1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623091229702492483605585073721264412149709993583141322266592750559275579995050115278206057147);
traits!(Sqrt3, sqrt3, SQRT_3, 1.73205080756887729352744634150587236694280525381038062805580697945193301690880003708114618675724857567562614141540670302996994509499895247881165551209437364852809323190230558206797482010108467492326501);
traits!(Sqrt5, sqrt5, SQRT_5, 2.23606797749978969640917366873127623544061835961152572427089724541052092563780489941441440837878227496950817615077378350425326772444707386358636012153345270886677817319187916581127664532263985658053576);
traits!(Sqrt6, sqrt6, SQRT_6, 2.44948974278317809819728407470589139196594748065667012843269256725096037745731502653985943310464023481859460122661418912485886545983775734162578395123727855282891274752767657124763010527091177022348131);
traits!(Sqrt7, sqrt7, SQRT_7, 2.64575131106459059050161575363926042571025918308245018036833445920106882323028362776039288647454361061506457833849746309574352988862721478442739055588010772271715072972832389229968959486508726070097805);
traits!(Sqrt8, sqrt8, SQRT_8, 2.82842712474619009760337744841939615713934375075389614635335947598146495692421407770077506865528314547002769246182459404984967211170147442528824299419987166282644533185501118551159990100230556412114294);

traits!(Gamma, gamma, GAMMA, 0.5772157149015320272731787567499024310421593319716696305518406475832804244327873260596232787429621998967493293677335263434705399411594284877025607072946081359269854698475604593201661489094222603587709018385260450508601648921752385876783190914626413820179278245617785521802692681575430243010729870185001907183254520507346487198145044046203008609234301632148896501848322875438835634453021189989911536635399330425558332268590251911396495619363841349074930004761512862012271774636105193711998496815811156364417853059175588852707245025077734143396764546574017934471231579966717435631643502284332706007170128348406857739491863958501217936108993817753298084003587354206555400086903783080145284328136313378118830163736983488468375033692193316608269689240982596421567137938872120123364320847036145398025632883271697815133158605637598886801792996105183339916721388861881839312867905584469833776367889095713335148318165385081643330325165161330341452358057952455213453105277384338571628533610254522952315515051864021424);

